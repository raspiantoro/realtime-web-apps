// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamClient interface {
	GetDataStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Stream_GetDataStreamClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (Stream_BidiStreamClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) GetDataStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Stream_GetDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/stream.Stream/GetDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGetDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_GetDataStreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamGetDataStreamClient struct {
	grpc.ClientStream
}

func (x *streamGetDataStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (Stream_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[1], "/stream.Stream/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamBidiStreamClient{stream}
	return x, nil
}

type Stream_BidiStreamClient interface {
	Send(*BiRequest) error
	Recv() (*BiResponse, error)
	grpc.ClientStream
}

type streamBidiStreamClient struct {
	grpc.ClientStream
}

func (x *streamBidiStreamClient) Send(m *BiRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamBidiStreamClient) Recv() (*BiResponse, error) {
	m := new(BiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
// All implementations must embed UnimplementedStreamServer
// for forward compatibility
type StreamServer interface {
	GetDataStream(*StreamRequest, Stream_GetDataStreamServer) error
	BidiStream(Stream_BidiStreamServer) error
	mustEmbedUnimplementedStreamServer()
}

// UnimplementedStreamServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (UnimplementedStreamServer) GetDataStream(*StreamRequest, Stream_GetDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataStream not implemented")
}
func (UnimplementedStreamServer) BidiStream(Stream_BidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedStreamServer) mustEmbedUnimplementedStreamServer() {}

// UnsafeStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServer will
// result in compilation errors.
type UnsafeStreamServer interface {
	mustEmbedUnimplementedStreamServer()
}

func RegisterStreamServer(s grpc.ServiceRegistrar, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_GetDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).GetDataStream(m, &streamGetDataStreamServer{stream})
}

type Stream_GetDataStreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type streamGetDataStreamServer struct {
	grpc.ServerStream
}

func (x *streamGetDataStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Stream_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).BidiStream(&streamBidiStreamServer{stream})
}

type Stream_BidiStreamServer interface {
	Send(*BiResponse) error
	Recv() (*BiRequest, error)
	grpc.ServerStream
}

type streamBidiStreamServer struct {
	grpc.ServerStream
}

func (x *streamBidiStreamServer) Send(m *BiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamBidiStreamServer) Recv() (*BiRequest, error) {
	m := new(BiRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDataStream",
			Handler:       _Stream_GetDataStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _Stream_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/stream.proto",
}
