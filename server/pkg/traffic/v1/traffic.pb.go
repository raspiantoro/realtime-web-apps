// Code generated by protoc-gen-go. DO NOT EDIT.
// source: traffic.proto

package traffic

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TrafficCountRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficCountRequest) Reset()         { *m = TrafficCountRequest{} }
func (m *TrafficCountRequest) String() string { return proto.CompactTextString(m) }
func (*TrafficCountRequest) ProtoMessage()    {}
func (*TrafficCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_50e185a42cb2d3c6, []int{0}
}

func (m *TrafficCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficCountRequest.Unmarshal(m, b)
}
func (m *TrafficCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficCountRequest.Marshal(b, m, deterministic)
}
func (m *TrafficCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficCountRequest.Merge(m, src)
}
func (m *TrafficCountRequest) XXX_Size() int {
	return xxx_messageInfo_TrafficCountRequest.Size(m)
}
func (m *TrafficCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficCountRequest proto.InternalMessageInfo

type TrafficCountResponse struct {
	TrafficCount         uint64   `protobuf:"varint,1,opt,name=trafficCount,proto3" json:"trafficCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficCountResponse) Reset()         { *m = TrafficCountResponse{} }
func (m *TrafficCountResponse) String() string { return proto.CompactTextString(m) }
func (*TrafficCountResponse) ProtoMessage()    {}
func (*TrafficCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50e185a42cb2d3c6, []int{1}
}

func (m *TrafficCountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficCountResponse.Unmarshal(m, b)
}
func (m *TrafficCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficCountResponse.Marshal(b, m, deterministic)
}
func (m *TrafficCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficCountResponse.Merge(m, src)
}
func (m *TrafficCountResponse) XXX_Size() int {
	return xxx_messageInfo_TrafficCountResponse.Size(m)
}
func (m *TrafficCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficCountResponse proto.InternalMessageInfo

func (m *TrafficCountResponse) GetTrafficCount() uint64 {
	if m != nil {
		return m.TrafficCount
	}
	return 0
}

func init() {
	proto.RegisterType((*TrafficCountRequest)(nil), "traffic.TrafficCountRequest")
	proto.RegisterType((*TrafficCountResponse)(nil), "traffic.TrafficCountResponse")
}

func init() { proto.RegisterFile("traffic.proto", fileDescriptor_50e185a42cb2d3c6) }

var fileDescriptor_50e185a42cb2d3c6 = []byte{
	// 126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x29, 0x4a, 0x4c,
	0x4b, 0xcb, 0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x44, 0xb9,
	0x84, 0x43, 0x20, 0x4c, 0xe7, 0xfc, 0xd2, 0xbc, 0x92, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12,
	0x25, 0x2b, 0x2e, 0x11, 0x54, 0xe1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x25, 0x2e, 0x9e,
	0x12, 0x24, 0x71, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x14, 0x31, 0xa3, 0x68, 0x2e, 0x76,
	0xa8, 0x5e, 0xa1, 0x00, 0x2e, 0x7e, 0xf7, 0xd4, 0x12, 0x64, 0x93, 0x84, 0x64, 0xf4, 0x60, 0x2e,
	0xc1, 0x62, 0xaf, 0x94, 0x2c, 0x0e, 0x59, 0x88, 0xf5, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0xf7, 0x1b,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x38, 0xae, 0xae, 0xa7, 0xd0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrafficClient is the client API for Traffic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrafficClient interface {
	GetTrafficCount(ctx context.Context, in *TrafficCountRequest, opts ...grpc.CallOption) (Traffic_GetTrafficCountClient, error)
}

type trafficClient struct {
	cc *grpc.ClientConn
}

func NewTrafficClient(cc *grpc.ClientConn) TrafficClient {
	return &trafficClient{cc}
}

func (c *trafficClient) GetTrafficCount(ctx context.Context, in *TrafficCountRequest, opts ...grpc.CallOption) (Traffic_GetTrafficCountClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Traffic_serviceDesc.Streams[0], "/traffic.Traffic/GetTrafficCount", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficGetTrafficCountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Traffic_GetTrafficCountClient interface {
	Recv() (*TrafficCountResponse, error)
	grpc.ClientStream
}

type trafficGetTrafficCountClient struct {
	grpc.ClientStream
}

func (x *trafficGetTrafficCountClient) Recv() (*TrafficCountResponse, error) {
	m := new(TrafficCountResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrafficServer is the server API for Traffic service.
type TrafficServer interface {
	GetTrafficCount(*TrafficCountRequest, Traffic_GetTrafficCountServer) error
}

// UnimplementedTrafficServer can be embedded to have forward compatible implementations.
type UnimplementedTrafficServer struct {
}

func (*UnimplementedTrafficServer) GetTrafficCount(req *TrafficCountRequest, srv Traffic_GetTrafficCountServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrafficCount not implemented")
}

func RegisterTrafficServer(s *grpc.Server, srv TrafficServer) {
	s.RegisterService(&_Traffic_serviceDesc, srv)
}

func _Traffic_GetTrafficCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrafficCountRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrafficServer).GetTrafficCount(m, &trafficGetTrafficCountServer{stream})
}

type Traffic_GetTrafficCountServer interface {
	Send(*TrafficCountResponse) error
	grpc.ServerStream
}

type trafficGetTrafficCountServer struct {
	grpc.ServerStream
}

func (x *trafficGetTrafficCountServer) Send(m *TrafficCountResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Traffic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "traffic.Traffic",
	HandlerType: (*TrafficServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTrafficCount",
			Handler:       _Traffic_GetTrafficCount_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traffic.proto",
}
